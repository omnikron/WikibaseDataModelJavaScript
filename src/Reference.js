/**
 * @licence GNU GPL v2+
 * @author Daniel Werner < daniel.werner@wikimedia.de >
 * @author H. Snater < mediawiki@snater.com >
 */
( function( wb, $ ) {
	'use strict';

	/**
	 * Represents a Wikibase Reference.
	 * For reduced complexity, hash management as done in the back-end object model is omitted. When
	 * altering a reference via the API, a new Reference object featuring the new hash generated by
	 * the back-end should be instantiated.
	 * @constructor
	 * @since 0.3
	 *
	 * @param {wikibase.datamodel.SnakList} [snaks]
	 * @param {string} [hash] Omit, if the Reference object should represent a new reference.
	 */
	var SELF = wb.datamodel.Reference = function WbReference( snaks, hash ) {
		this._snaks = new wb.datamodel.SnakList( snaks );
		this._hash = hash;
	};

	$.extend( SELF.prototype, {
		/**
		 * @type {string|null}
		 */
		_hash: null,

		/**
		 * @type {wikibase.datamodel.SnakList}
		 */
		_snaks: null,

		/**
		 * Returns the Reference's hash.
		 *
		 * @return {string|null}
		 */
		getHash: function() {
			return this._hash;
		},

		/**
		 * Returns the Reference's Snaks.
		 *
		 * @return {wikibase.datamodel.SnakList}
		 */
		getSnaks: function() {
			return this._snaks;
		},

		/**
		 * Returns whether the Reference object is equal to another Reference object by comparing
		 * the References' Snaks.
		 *
		 * @param {wikibase.datamodel.Reference} reference
		 * @return {boolean}
		 */
		equals: function( reference ) {
			return this._snaks.equals( reference.getSnaks() );
		},

		/**
		 * Returns a JSON structure representing this reference.
		 *
		 * TODO: implement this as a wb.datamodel.serialization.Serializer
		 *
		 * @return {Object}
		 */
		toJSON: function() {
			var json = {
				snaks: this._snaks.toJSON(),
				'snaks-order': this._snaks.getPropertyOrder()
			};

			if ( this._hash ) {
				json.hash = this._hash;
			}

			return json;
		}
	} );

	SELF.newFromJSON = function( json ) {
		return new SELF(
			wb.datamodel.SnakList.newFromJSON( json.snaks, json['snaks-order'] ),
			json.hash
		);
	};

}( wikibase, jQuery ) );
